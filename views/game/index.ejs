<h1 class="text-center mt-4">LIE || DIE</h1>
<p class="lead text-center mb-3">Say hi to your friends <%= name %>!</p>
<div style="display: inline-block;">
    <canvas tabindex='1' id="ctx" width="750" height="500" style="border:1px solid #000000; transition: width .5s, height .5s, top .5s, left .5s; display: inline-block;"></canvas>
    <button type = "button" disabled name = "first" class="playerButtons" onclick="vote(this)" style="position: relative; left: 93px; top: -335px; display: none;">Vote</button>
    <button type = "button" disabled name = "second" class="playerButtons" onclick="vote(this)" style="position: relative; left: 348px; top: -365px; display: none;">Vote</button>
    <button type = "button" disabled name = "third" class="playerButtons" onclick="vote(this)" style="position: relative; left: 601px; top: -395px; display: none;">Vote</button>
    <button type = "button" disabled name = "fourth" class="playerButtons" onclick="vote(this)" style="position: relative; left: 219px; top: -270px; display: none;">Vote</button>
    <button type = "button" disabled name = "fifth" class="playerButtons" onclick="vote(this)" style="position: relative; left: 475px; top: -300px; display: none;">Vote</button>
    <input type = "image" name = "manual" id="manualVoteButton" onclick="manualVote()" src="/voteButton.png" style="position: relative; right: 700px; top: -45px; clear:both; display: none"/>
</div>    
<div id="chatbox" style="float:right; width:25%;">
    <div class="chat-sidebar">
        <h3><i class="fas fa-users"></i> Player's Chat</h3>
    </div>
        <div id = "chat-text" style="float:top; height:200px; overflow-y:auto; overflow-x:auto; "></div>
    <div class="chat-form-container">
    <form id="chat-form">
        <input
        id="chat-input"
        type="text"
        placeholder="Enter Message"
        required
        autocomplete="off"
        />
        <button type="submit" id="chat-form"><i class="fas fa-paper-plane"></i> Send</button>
    </form>
    </div>
    <a href="/dashboard" class="btn btn-secondary" style="margin-top: 10px;">Dashboard</a>
</div>
<script src="/socket.io/socket.io.js"></script>
<script>
    var ctx = document.getElementById("ctx").getContext("2d");
    var ctxx = document.getElementById("ctx");
    var chatText = document.getElementById("chat-text");
    var chatForm = document.getElementById("chat-form");
    var chatInput = document.getElementById("chat-input");
    var buttons = document.getElementsByClassName('playerButtons');
    var playerName = "<%= name %>";
    ctx.font = '30px lucida';
    var socket = io();
    var WIDTH = 750;
    var HEIGHT = 500;
    var tileSize = 16;
    var inLobby = true;
    var voting = false;
    var meleeCooldown = false;
    var killerDead = false;
    var gameOver = false;
 
    //map img
    var selfId = null;
    var gameMap = function() {
        var self = {
            image: new Image(),
            width: 86,
            height: 81,
        }
        var nightGradient = 1;
        self.image.src = "/testMap.png";
        self.drawMap = function() {
            var x = WIDTH/2 - Player.list[selfId].x;
            var y = HEIGHT/2 - Player.list[selfId].y;
            ctx.drawImage(self.image, x, y);
            if (nightTime) {
                ctx.globalCompositionOperation = "source-atop";
                if (nightGradient >= 20 && nightGradient < 150) {
                    ctx.fillStyle = "rgba(20, 20, " + nightGradient + ", 0.5)";  
                    nightGradient = nightGradient + 1;
                } else if (nightGradient < 20) {
                    ctx.fillStyle = "rgba(" + nightGradient + ", " + nightGradient + ", " + nightGradient + ", 0.5)"; 
                    nightGradient = nightGradient + 1;
                } else {
                    ctx.fillStyle = "rgba(20, 20, 150, 0.5)"
                }
                ctx.fillRect(0, 0, 750, 500);
            } else if (!nightTime && nightGradient > 1) {
                ctx.globalCompositionOperation = "source-atop";
                if (nightGradient >= 20 && nightGradient <= 150) {
                    ctx.fillStyle = "rgba(20, 20, " + nightGradient + ", 0.5)";  
                    nightGradient = nightGradient - 1;
                } else if (nightGradient < 20) {
                    ctx.fillStyle = "rgba(" + nightGradient + ", " + nightGradient + ", " + nightGradient + ", 0.5)"; 
                    nightGradient = nightGradient - 1;
                } 
                ctx.fillRect(0, 0, 750, 500);
            }
        }
        return self;
    }

    var lobbyMap = function() {
        var self = {
            image: new Image(),
            width: 47,
            height: 32
        }
        self.image.src = "/lobbyMap.png";
        self.drawMap = function() {
            ctx.drawImage(self.image, 0, 0, 752, 512);
        }
        return self;
    }
    var currentMap = lobbyMap();
    //game 
    var Player = function(initPack) {
        var self = {};
        self.id = initPack.id;
        self.groupId = initPack.groupId;
        self.number = initPack.number;
        self.x = initPack.x;
        self.y = initPack.y;
        self.name = initPack.name;
        self.death = initPack.death;
        self.lynchCoordinate = initPack.lynchCoordinate;
        self.hp = initPack.hp;
        self.hpMax = initPack.hpMax;
        self.noOfBullets = initPack.noOfBullets;
        self.slashing = initPack.slashing;
        self.slash = initPack.slash;
        self.killer = initPack.killer;
        self.voteCount = 0;
        self.ghost = false;
        self.pressingRight = false;
        self.pressingLeft = false;
        self.pressingUp = false;
        self.pressingDown = false;
        self.img = new Image();
        self.img.src = "/player.png";
        Player.list[self.id] = self;
        self.mapDraw = function() {
            if (!self.ghost) {
                var x = self.x - Player.list[selfId].x + WIDTH/2;
                var y = self.y - Player.list[selfId].y + HEIGHT/2; 
                if (selfId == self.id) {
                    if (self.hp > 0) {
                        var hpWidth = 30 * self.hp / self.hpMax;
			            ctx.fillStyle = 'red';
                        ctx.fillRect(x - hpWidth/2,y - 40,hpWidth,4)
                    }
                    if (self.killer) {
                        ctx.fillText("Alien", 340, 30);
                    } else {
                        ctx.fillStyle = 'blue'
                        ctx.fillText("Human", 340, 30);
                    }
                    ctx.fillText('Bullets(s): ' + self.noOfBullets, 580, 30);
                }
                var width = self.img.width * 2;
                var height = self.img.height * 2;
                ctx.drawImage(self.img, 0, 0, self.img.width, self.img.height, x-width/2, y-height/2, width, height);
                ctx.fillStyle = 'black';
                ctx.fillText(self.name, x - 20, y + height *9/10);
            }
        }
        self.playerRestore = function() {
            self.img.src = "/player.png"
        }
        self.playerDeath = function() {
            self.death = true;
            if (self.killer) {
                self.img.src = "/deadAlien.png"
            } else {
                self.img.src = "/dead.png"
            }
            self.lynchCoordinate.y = self.lynchCoordinate.y - 20;
            self.lynchCoordinate.x = self.lynchCoordinate.x - 12;
        }
        self.getDistance = function(pt){
            return Math.sqrt(Math.pow(self.x-pt.x,2) + Math.pow(self.y-pt.y,2));
        }
        //spectator mode
        self.spectatorMode = function() {
            /*self.img.src = "/ghost.png";
            socket.emit('ghostMode', {
                groupId: self.groupId,
                Id: selfId
            })*/
            console.log('I became a ghost');
        }
        self.reducedVision = function(opacity) {
            if (self.death || self.killer) {
                return;
            }
            if (self.pressingDown) {
                ctx.beginPath();
                ctx.moveTo(0, 0);
                ctx.lineTo(750, 0);
                ctx.lineTo(750, 500);
                ctx.lineTo(350, 250);
                ctx.lineTo(0, 500);
                ctx.lineTo(0, 0);
                ctx.closePath();
                ctx.fillStyle = 'rgba(0, 0, 0, ' + opacity + ')';
                ctx.fill();
            } else if (self.pressingUp) {
                ctx.beginPath();
                ctx.moveTo(0, 0);
                ctx.lineTo(350, 250);
                ctx.lineTo(750, 0);
                ctx.lineTo(750, 500);
                ctx.lineTo(0, 500);
                ctx.lineTo(0, 0);
                ctx.closePath();
                ctx.fillStyle = 'rgba(0, 0, 0, ' + opacity + ')';
                ctx.fill();
            } else if (self.pressingRight) {
                ctx.beginPath();
                ctx.moveTo(0, 0);
                ctx.lineTo(750, 0);
                ctx.lineTo(350, 250);
                ctx.lineTo(750, 500);
                ctx.lineTo(0, 500);
                ctx.lineTo(0, 0);
                ctx.closePath();
                ctx.fillStyle = 'rgba(0, 0, 0, ' + opacity + ')';
                ctx.fill();
            } else if (self.pressingLeft) {
                ctx.beginPath();
                ctx.moveTo(0, 0);
                ctx.lineTo(750, 0);
                ctx.lineTo(750, 500);
                ctx.lineTo(0, 500);
                ctx.lineTo(350, 250);
                ctx.lineTo(0, 0);
                ctx.closePath();
                ctx.fillStyle = 'rgba(0, 0, 0, ' + opacity + ')';
                ctx.fill();
            } else {
                ctx.beginPath();
                ctx.moveTo(0, 0);
                ctx.lineTo(750, 0);
                ctx.lineTo(350, 250);
                ctx.lineTo(750, 500);
                ctx.lineTo(0, 500);
                ctx.lineTo(0, 0);
                ctx.closePath();
                ctx.fillStyle = 'rgba(0, 0, 0, ' + opacity + ')';
                ctx.fill();
            }
            if (self.killer) {
                ctx.fillStyle = "red";
                ctx.fillText("Alien", 340, 30);
            } else {
                ctx.fillStyle = "blue";
                ctx.fillText("Human", 340, 30);
            }
            ctx.fillText('Bullets(s): ' + self.noOfBullets, 580, 30);
        }
        self.setDirection = function(direction) {
            if (direction === 'right') {
                self.pressingRight = true;
                self.pressingLeft = false;
                self.pressingDown = false;
                self.pressingUp = false;
            } else if (direction === 'left') {
                self.pressingLeft = true;
                self.pressingRight = false;
                self.pressingDown = false;
                self.pressingUp = false;
            } else if (direction === 'up') {
                self.pressingUp = true;
                self.pressingRight = false;
                self.pressingLeft = false;
                self.pressingDown = false;
            } else if (direction === 'down') {
                self.pressingDown = true;
                self.pressingRight = false;
                self.pressingLeft = false;
                self.pressingUp = false;
            }
        }
        self.lobbyDraw = function() {
            var x = self.x;
            var y = self.y;
            ctx.drawImage(self.img, x, y, self.img.width * 2, self.img.height * 2);
        }
        self.Draw = function() {
            self.lobbyDraw();
        }
        self.updateDrawMethod = function() {
            self.Draw = function() {
                self.mapDraw();
            }
        }
        return self;
    }
    Player.list = [];

    var Bullet = function(initPack) {
        var self = {};
        self.id = initPack.id;
        self.groupId = initPack.groupId;
        self.x = initPack.x;
        self.y = initPack.y;
        self.img = new Image();
        self.img.src = "/bullet.png"; 
        self.Draw = function() {
            var width = self.img.width/2;
			var height = self.img.height/2;
			var x = self.x - Player.list[selfId].x + WIDTH/2;
			var y = self.y - Player.list[selfId].y + HEIGHT/2;
			ctx.drawImage(self.img,
				0,0,self.img.width,self.img.height,
                x-width/2,y-height/2,width,height
            ); 
        }
        Bullet.list[self.id] = self;
        return self;

    }
    Bullet.list = {};
    
    socket.on('init', function(data) {
        if (data.selfId && selfId == null) {
            selfId = data.selfId;
        }
        for (var i = 0; i < data.player.length; i++) {
            new Player(data.player[i]);
        }
    })

    socket.on('groupIdChange', function(data) {
        for (var i in Player.list) {
            Player.list[i].groupId = data.newGroupId;
        }
    })

    var isEmpty = function(obj) {
        for (var i in obj) {
            return false;
        }
        return true;
    }

    socket.on('playerDisconnected', function(data) {
        if (gameOver) {
            return;
        }
        var disconnectedPlayer = Player.list[data.playerId];
        disconnectedPlayer.playerDeath();
        disconnectedPlayer.ghost = true;
        if (disconnectedPlayer.killer && !isEmpty(Player.list)) {
            setTimeout(survivorVictory, 1000);
        } else if (!disconnectedPlayer.killer && !isEmpty(Player.list)) {
            var counter = 0;
            for (var i in Player.list) {
                var thisPlayer = Player.list[i];
                if (thisPlayer.death && !thisPlayer.killer) {
                    counter += 1;
                }
                console.log(counter);
            }
            if (counter == 4) {
                setTimeout(killerVictory, 1000);
            }
        }

    })

    socket.on('update', function(data) {
        var playerData = data.playerPack;
        for (var i = 0; i < playerData.length; i++) {
            var pack = playerData[i];
            var p = Player.list[pack.id];
            if (p) {
                if (pack.x !== undefined) {
                    p.x = pack.x;
                }
                if (pack.y !== undefined) {
                    p.y = pack.y;
                }
                if (pack.hp !== undefined) {
                    p.hp = pack.hp;
                }
                if (pack.noOfBullets !== undefined) {
                    p.noOfBullets = pack.noOfBullets;
                }
                if (pack.slashing !== undefined) {
                    p.slashing = pack.slashing;
                }
                if (p.slash !== undefined) {
                    p.slash = pack.slash;
                }
            }
        }
        var bulletData = data.bulletPack;
        if (bulletData !== undefined) {
            for (var i = 0; i < bulletData.length; i++) {
            var pack = bulletData[i];
            if (pack.toRemove) {
                delete Bullet.list[pack.id];
            } else if (Bullet.list[pack.id] == undefined) {
                Bullet(pack);
            } else {
                var b = Bullet.list[pack.id];
                if (pack.x !== undefined) {
                    b.x = pack.x;
                }
                if (pack.y !== undefined) {
                    b.y = pack.y;
                }
            }
        }
        }
    })

    socket.on('playerDeath', function(data) {
        var deadPlayer = Player.list[data.deadPlayerId];
        deadPlayer.playerDeath();
        if (deadPlayer.killer) {
            setTimeout(survivorVictory, 1000);
        } else {
            var counter = 0;
            for (var i in Player.list) {
                var thisPlayer = Player.list[i];
                if (thisPlayer.death && !thisPlayer.killer) {
                    counter += 1;
                }
            }
            if (counter == 4) {
                setTimeout(killerVictory, 1000);
            }
        }
    })
    
    function setIntervalX(callback, delay, repetitions) {
        var x = 0;
        var intervalID = window.setInterval(function () {
        callback();
        if (++x === repetitions) {
            window.clearInterval(intervalID);
        }
        }, delay);
    }

    
    var countDown = 5;
    var gameStartCountdown = function() {
        if (gameOver) {
            return;
        }
        const messageElement = document.createElement('div');
        messageElement.innerText = "System: Game starts in " + countDown;
        chatText.append(messageElement);
        chatText.scrollTop = chatText.scrollHeight;
        countDown = countDown - 1;
        if (countDown === 0) {
            loading = true;
            var intervalID = setInterval(function() {
                if (gameOver) {
                    return;
                }
                ctx.clearRect(0, 0, 750, 500);
                currentMap.drawMap();
                for (var i in Player.list) {
                    Player.list[i].Draw();
                }
                ctx.beginPath();
                ctx.rect(0, 0, 750, screenHeight);
                ctx.fillStyle = "black";
                ctx.fill();
                ctx.closePath();
                screenHeight = screenHeight + 10;
                if(screenHeight == 550) {
                    socket.emit('gameStarted', {
                        groupID: Player.list[selfId].groupId,
                    });
                    currentMap = gameMap();
                    for (var i in Player.list) {
                        Player.list[i].updateDrawMethod();
                    } 
                    clearInterval(intervalID);       
                }
            }, 1000/65)
            return;
        }
    }

    // lynch system
    var manualVote = function() {
        socket.emit('manualVote', {
            groupId: Player.list[selfId].groupId
        })
    }
    var deathRadar = function() {
        var thisPlayer = Player.list[selfId]
        for (var i in Player.list) {
            var anotherPlayer = Player.list[i];
            if (anotherPlayer.death && !anotherPlayer.ghost && (anotherPlayer.id != selfId) && !anotherPlayer.killer) {
                var point = {
                    x: anotherPlayer.x,
                    y: anotherPlayer.y
                }
                var distance = thisPlayer.getDistance(point);
                var manualVote = document.getElementById('manualVoteButton');
                if (distance <= 300) {
                    manualVote.style.display = "inline";
                    break;
                } else {
                    manualVote.style.display = "none";
                    continue;
                }
            }
        }
    }
    var resultRevealed = false;
    var lynchWindow = function() {
        if (gameOver) {
            return;
        }
        loading = true;
        voting = false;
        var manualVote = document.getElementById("manualVoteButton");
        manualVote.style.display = "none";
        var timer = 8;
        var tracker = 0;
        var lynchInterval = setInterval(function() {
            ctx.clearRect(0, 0, 750, 500);
            if (!voting) {
                currentMap.drawMap();
            }
            ctx.beginPath();
            ctx.rect(0, 0, 750, screenHeight);
            ctx.fillStyle = "white";
            ctx.fill();
            ctx.closePath();
            if (screenHeight < 560) {
                screenHeight = screenHeight + 20;
            } else {
                voting = true;
                for (var i in Player.list) {
                    var player = Player.list[i];
                    ctx.drawImage(player.img, player.lynchCoordinate.x, player.lynchCoordinate.y, player.img.width * 2, player.img.height * 2)
                    ctx.fillStyle = "black";
                    ctx.fillText(timer, 360, 30);
                    if (player.death) {
                        ctx.fillText(player.voteCount, player.lynchCoordinate.x + 20, player.lynchCoordinate.y + 20)
                    } else {
                        ctx.fillText(player.voteCount, player.lynchCoordinate.x + 8, player.lynchCoordinate.y - 10);
                    }
                }
                if (tracker < 65) {
                    tracker += 1;
                } else if (tracker == 65) {
                    timer -= 1
                    tracker = 0;
                    if (timer == 0) {
                        for (var i = 0; i < buttons.length; i++) {
                            buttons[i].disabled = true;
                        }
                        tracker = 66;
                    }
                }
                if (resultRevealed) {
                    clearInterval(lynchInterval);
                }
            }
        }, 1000/65);
        for (var i in Player.list) {
            var pos = Player.list[i].lynchCoordinate.pos - 1;
            buttons[pos].style.display = "block";
            if (!Player.list[selfId].death && !Player.list[i].death) {
                buttons[pos].disabled = false;
            }

        }
        
    }

    socket.on('lynchTime', function() {
        lynchWindow();
    })

    //lynch vote buttons
    var lastVote = null;
    function vote(voteButton) {
        if (voteButton.name == "first") {
            socket.emit("vote", {
                id: selfId,
                position: 1,
                groupID: Player.list[selfId].groupId,
                previousVote: lastVote
            })
            if (lastVote) {
                buttons[lastVote - 1].disabled = false;
            }
            lastVote = 1;
        } else if (voteButton.name == "second") {
            socket.emit("vote", {
                id: selfId,
                position: 2,
                groupID: Player.list[selfId].groupId,
                previousVote: lastVote
            })
            if (lastVote) {
                buttons[lastVote - 1].disabled = false;
            }
            lastVote = 2;
        } else if (voteButton.name == "third") {
            socket.emit("vote", {
                id: selfId,
                position: 3,
                groupID: Player.list[selfId].groupId,
                previousVote: lastVote
            })
            if (lastVote) {
                buttons[lastVote - 1].disabled = false;
            }
            lastVote = 3;
        } else if (voteButton.name == "fourth") {
            socket.emit("vote", {
                id: selfId,
                position: 4,
                groupID: Player.list[selfId].groupId,
                previousVote: lastVote
            })
            if (lastVote) {
                buttons[lastVote - 1].disabled = false;
            }
            lastVote = 4;
        } else if (voteButton.name == "fifth") {
            socket.emit("vote", {
                id: selfId,
                position: 5,
                groupID: Player.list[selfId].groupId,
                previousVote: lastVote
            })
            if (lastVote) {
                buttons[lastVote - 1].disabled = false;
            }
            lastVote = 5;
        }
        voteButton.disabled = true;
    }
    socket.on('voteUpdate', function(data) {
        console.log(data);
        for (var i = 0; i < data.length; i++) {
            var player = Player.list[data[i].id];
            player.voteCount = data[i].voteCount;
        }
    })

    var survivorVictory = function() {
        screenHeight = 0;
        var screenColor = "white";
        if (Player.list[selfId].killer) {
            screenColor = "red";
        } else {
            screenColor = "blue";
        } 
        gameOver = true;
        var finishInterval = setInterval(function() {
            ctx.clearRect(0, 0, 750, 500);
            ctx.beginPath();
            ctx.rect(0, 0, 750, screenHeight);
            ctx.fillStyle = screenColor;
            ctx.fill();
            if (screenHeight < 550) {
                screenHeight = screenHeight + 15;
            } else {
                clearInterval(finishInterval);
                if (Player.list[selfId].killer) {
                    var killer = Player.list[selfId];
                    var width = killer.img.width* 2;
                    var height = killer.img.height * 2;
                    ctx.drawImage(killer.img, 345, 200, width, height);
                    ctx.fillStyle = "black";
                    ctx.fillText("You lost!", 320, 305);
                    ctx.fillText("Better luck next time!", 230, 340);
                } else {
                    var survivor = Player.list[selfId];
                    survivor.playerRestore();
                    var width = survivor.img.width * 2;
                    var height = survivor.img.height * 2;
                    ctx.drawImage(survivor.img, 345, 200, width, height);
                    ctx.fillStyle = "white";
                    ctx.fillText("Congrats, you survived!", 245, 305);
                }
            }
        }, 1000/60)
    }

    var killerVictory = function() {
        screenHeight = 0;
        var screenColor = "white";
        if (Player.list[selfId].killer) {
            screenColor = "blue";
        } else {
            screenColor = "red";
        } 
        gameOver = true;
        var finishInterval = setInterval(function() {
            ctx.clearRect(0, 0, 750, 500);
            ctx.beginPath();
            ctx.rect(0, 0, 750, screenHeight);
            ctx.fillStyle = screenColor;
            ctx.fill();
            if (screenHeight < 550) {
                screenHeight = screenHeight + 15;
            } else {
                clearInterval(finishInterval);
                if (Player.list[selfId].killer) {
                    var killer = Player.list[selfId];
                    var width = killer.img.width* 2;
                    var height = killer.img.height * 2;
                    ctx.drawImage(killer.img, 345, 200, width, height);
                    ctx.fillStyle = "white";
                    ctx.fillText("Victory!", 320, 305);
                    ctx.fillText("They never stood a chance", 230, 340);
                } else {
                    var survivor = Player.list[selfId];
                    if (!survivor.death) {
                        survivor.playerDeath;
                    }
                    var width = survivor.img.width * 2;
                    var height = survivor.img.height * 2;
                    ctx.drawImage(survivor.img, 345, 200, width, height);
                    ctx.fillStyle = "black";
                    ctx.fillText("The survivors lost...", 245, 305);
                }
            }
        }, 1000/60)

    }
    var lynchToGame = function() {
        screenHeight = 0;
        resultRevealed = false;
        for (var i = 0; i < buttons.length; i++) {
            buttons[i].style.display = "none";
            buttons[i].disabled = true;
        }
        for (var i in Player.list) {
            Player.list[i].voteCount = 0;
            if (Player.list[i].death) {
                Player.list[i].ghost = true;
                if (Player.list[i].id == selfId) {
                    Player.list[i].spectatorMode();
                }
            }
        }
        lastVote = null;
        var resetInterval = setInterval(function() {
            ctx.clearRect(0, 0, 750, 500);
            ctx.beginPath();
            ctx.rect(0, 0, 750, screenHeight);
            ctx.fillStyle = "black";
            ctx.fill();
            if (screenHeight < 550) {
                screenHeight = screenHeight + 15;
            } else {
                clearInterval(resetInterval);
                var intervalID = setInterval(function() {
                    ctx.clearRect(0, 0, 750, 500);
                    currentMap.drawMap();
                    for (var i in Player.list) {
                        Player.list[i].Draw();
                    }
                    ctx.beginPath();
                    ctx.rect(0, 0, 750, screenHeight);
                    ctx.fillStyle = "black";
                    ctx.fill();
                    screenHeight = screenHeight - 10;
                    if(screenHeight < 0) {
                        loading = false;
                        voting = false;
                        nightTime = false;
                        opac = 0;
                        clearInterval(intervalID); 
                        setTimeout(beginNight, 5000);
                    }
                }, 1000/65) 
            }
        }, 1000/65)
    }
    var revealRole = function(lynchedPlayerId, answer) {
        resultRevealed = false;
        var lynchedPlayer = Player.list[lynchedPlayerId];
        for (var i = 0; i < buttons.length; i++) {
            buttons[i].style.display = "none";
        }
        var revealInterval = setInterval(function() {
            ctx.clearRect(0, 0, 750, 500);
            ctx.beginPath()
            ctx.rect(0, 0, 750, 500);
            ctx.fillStyle = "white";
            ctx.fill();
            ctx.closePath();
            var lynchedPlayer = Player.list[lynchedPlayerId];
            lynchedPlayer.playerDeath();
            var width = lynchedPlayer.img.width * 2;
            var height = lynchedPlayer.img.height * 2;
            ctx.drawImage(lynchedPlayer.img, 345, 200, width, height);
            if (answer) {
                ctx.fillStyle = "black";
                ctx.fillText(lynchedPlayer.name + " is the killer!", 245, 305);
            } else {
                ctx.fillStyle = "black";
                ctx.fillText(lynchedPlayer.name + " is not the killer!", 245, 305);
            }
        }, 1000/65);
        if (answer) {
            setTimeout(function() {
                clearInterval(revealInterval);
                survivorVictory();
            }, 5000);
        } else {
            setTimeout(function() {
                clearInterval(revealInterval);
                lynchToGame();
            }, 5000);
        }
    }
    socket.on('lynchResult', function(data) {
        var lynchId = data.lynchedId;
        if (lynchId != null || lynchId != undefined) {
            var lynchedPlayer = Player.list[lynchId]
            var lynchedName = lynchedPlayer.name;
            const messageElement = document.createElement('div');
            messageElement.innerText = "System: " + lynchedName + " has been lynched!"
            chatText.append(messageElement);
            chatText.scrollTop = chatText.scrollHeight;
            resultRevealed = true;
            setTimeout(revealRole, 4000, lynchId, lynchedPlayer.killer);
        } else {
            const messageElement = document.createElement('div');
            messageElement.innerText = "System: No one has been voted out!"
            chatText.append(messageElement);
            chatText.scrollTop = chatText.scrollHeight;
            resultRevealed = true;
            setTimeout(lynchToGame, 4000);
        }
    })

    socket.on('gameStart', function() {
        setIntervalX(function(){
            gameStartCountdown();
        }, 1000, 5);
    })

    socket.on('killerIdentity', function(data) {
        var theKiller = Player.list[data.killerId]
        theKiller.killer = true;
        setTimeout(function() {
        if (selfId == data.killerId) {  
            ctx.fillStyle = "red";
            ctx.fillText("You are the killer", 300, 250);
            theKiller.img.src = "/alien.png";
        } else {
            ctx.fillStyle = "white";
            ctx.fillText("You are a survivor", 300, 250);
        }
        }, 6000);
    })

    socket.on('killerDead', function() {
        killerDead = true;
    })
    var screenHeight = 0;
    var loading = false;
    var beginNight = function() {
        if (voting || gameOver) {
            return;
        }
        var i = 3;
        setIntervalX(function(){
            if (gameOver || voting) {
                return;
            }
            nightTime = true;
            const messageElement = document.createElement('div');
            messageElement.innerText = "System: Night falls in " + i;
            chatText.append(messageElement);
            chatText.scrollTop = chatText.scrollHeight;
            i = i - 1;
            if (i == 0) {
                setTimeout(endNight, 5000);
            }
        }, 1000, 3);
        
    }
    var endNight = function() {
        if (voting || gameOver) {
            return;
        }
        var j = 3;
        setIntervalX(function() {
            if (gameOver || voting) {
                return;
            }
            nightTime = false;
            const endMessage = document.createElement('div');
            endMessage.innerText = "System: Night ends in " + j;
            chatText.append(endMessage);
            chatText.scrollTop = chatText.scrollHeight;
            j = j - 1
            if (j == 0) {
                setTimeout(beginNight, 5000);
            }
        }, 1000, 3)
    }
    socket.on('gameLoaded', function() {
        if (gameOver) {
            return;
        }
        inLobby = false;
        var intervalID = setInterval(function() {
            if (gameOver) {
                return;
            }
            ctx.clearRect(0, 0, 750, 500);
            currentMap.drawMap();
            for (var i in Player.list) {
                Player.list[i].Draw();
            }
            ctx.beginPath();
            ctx.rect(0, 0, 750, screenHeight);
            ctx.fillStyle = "black";
            ctx.fill();
            screenHeight = screenHeight - 10;
            if(screenHeight === 0) {
                loading = false;
                clearInterval(intervalID); 
                setTimeout(function() {
                    beginNight();
                }, 5000)
            }
        }, 1000/65) 
    })

    var opac = 0;
    var nightTime = false;
    setInterval(function(){
        if (!selfId || loading || voting || gameOver) {
            return;
        }
        ctx.clearRect(0, 0, 750, 500);
        currentMap.drawMap();
        for (var i in Player.list) {
            Player.list[i].Draw();
        }
        if (!nightTime && !Player.list[selfId].death) {
            deathRadar();
        }
        for (var i in Bullet.list) {
            Bullet.list[i].Draw();
        }
        if (nightTime) {
            var manualVote = document.getElementById('manualVoteButton');
            manualVote.style.display = "none";
            Player.list[selfId].reducedVision(opac);
            if (opac < 1) {
                opac = opac + 0.004;
            }
        } else if (opac > 0 && !nightTime) {
            Player.list[selfId].reducedVision(opac);
            opac = opac - 0.004;
        }
    }, 1000/65);

    //Chat 
    
    socket.on('addToChat', function(data) {
        const messageElement = document.createElement('div');
        messageElement.innerText = data;
        chatText.append(messageElement);
        chatText.scrollTop = chatText.scrollHeight;
    })

    socket.on('bulletShot', function() {
        Player.list[selfId].noOfBullets -= 1;
    })
    chatForm.onsubmit = function(e) {
        e.preventDefault();
        socket.emit('sendMsgToServer', {
            msg: chatInput.value,
            name: playerName,
            groupId: Player.list[selfId].groupId
        });
        chatInput.value = '';
    }
    ctxx.addEventListener('keydown', function(event) {
        event.preventDefault();
        if (voting || gameOver) {
            return;
        }
        if (event.keyCode === 68) { // right
            if (nightTime) {
                socket.emit('keyPress', {input: 'right', state: true, night: true});
            } else {
                socket.emit('keyPress', {input: 'right', state: true, night: false});
            }
            Player.list[selfId].setDirection('right');
        } else if (event.keyCode === 83) { // down
            if (nightTime) {
                socket.emit('keyPress', {input: 'down', state: true, night: true});
            } else {
                socket.emit('keyPress', {input: 'down', state: true, night: false});
            }
            Player.list[selfId].setDirection('down');
        } else if (event.keyCode === 65) { // left
            if (nightTime) {
                socket.emit('keyPress', {input: 'left', state: true, night: true});
            } else {
                socket.emit('keyPress', {input: 'left', state: true, night: false});
            }
            Player.list[selfId].setDirection('left');
        } else if (event.keyCode === 87) { // up
            if (nightTime) {
                socket.emit('keyPress', {input: 'up', state: true, night: true});
            } else {
                socket.emit('keyPress', {input: 'up', state: true, night: false});
            }
            Player.list[selfId].setDirection('up');
        } else if (event.keyCode === 32) { // space
            if (!inLobby) {
                if (Player.list[selfId].killer) {
                    if (!nightTime) {
                        socket.emit('keyPress',{input:'attack',state: true});
                    }
                } else {
                    socket.emit('keyPress',{input:'attack',state: true});
                }
            }
        } else if (event.keyCode === 16) {
            if (!inLobby && nightTime && Player.list[selfId].killer) {
                socket.emit('keyPress',{input:'meleeAttack',state: true});
            }
        } else {}
    }, false)
    
    ctxx.addEventListener('keyup', function(event) {
        event.preventDefault();
        if (voting || gameOver) {
            return;
        }
        if (event.keyCode === 68) { // right
            if (nightTime) {
                socket.emit('keyPress', {input: 'right', state: false, night: true});
            } else {
                socket.emit('keyPress', {input: 'right', state: false, night: false});
            }
        } else if (event.keyCode === 83) { // down
            if (nightTime) {
                socket.emit('keyPress', {input: 'down', state: false, night: true});
            } else {
                socket.emit('keyPress', {input: 'down', state: false, night: false});
            }
        } else if (event.keyCode === 65) { // left
            if (nightTime) {
                socket.emit('keyPress', {input: 'left', state: false, night: true});
            } else {
                socket.emit('keyPress', {input: 'left', state: false, night: false});
            }
        } else if (event.keyCode === 87) { // up
            if (nightTime) {
                socket.emit('keyPress', {input: 'up', state: false, night: true});
            } else {
                socket.emit('keyPress', {input: 'up', state: false, night: false});
            }
        } else if (event.keyCode === 32) { // space
            if (Player.list[selfId].killer) {
                if (!nightTime) {
                        socket.emit('keyPress',{input:'attack',state: false});
                }
            } else {
                socket.emit('keyPress',{input:'attack',state: false});
            }
        } else if (event.keyCode === 16) {
            if (!inLobby && nightTime && Player.list[selfId].killer) {
                socket.emit('keyPress',{input:'meleeAttack',state: false});
            }
        } else {}
    }, false)

    function getMousePos(canvas, evt) {
        var rect = canvas.getBoundingClientRect();
        return {
          x: evt.clientX - rect.left,
          y: evt.clientY - rect.top
        };
    }
    
    ctxx.addEventListener('mousemove', function(event) {
        event.preventDefault();
        var mousePos = getMousePos(ctxx, event);
        var dx = mousePos.x - WIDTH/2;
        var dy = mousePos.y - HEIGHT/2;
        var angle = Math.atan2(dy,dx) * (180/Math.PI);
        socket.emit('keyPress',{input:'mouseAngle',state:angle});
    }, false);
    
        
    
</script>
 

